import{$ as l,s as h,af as s,bk as g,m as r}from"./Sm2mCfDE.js";const f=l({height:[Number,String],maxHeight:[Number,String],maxWidth:[Number,String],minHeight:[Number,String],minWidth:[Number,String],width:[Number,String]},"dimension");function S(e){return{dimensionStyles:h(()=>{const t={},n=s(e.height),u=s(e.maxHeight),i=s(e.maxWidth),d=s(e.minHeight),o=s(e.minWidth),a=s(e.width);return n!=null&&(t.height=n),u!=null&&(t.maxHeight=u),i!=null&&(t.maxWidth=i),d!=null&&(t.minHeight=d),o!=null&&(t.minWidth=o),a!=null&&(t.width=a),t})}}const b=l({rounded:{type:[Boolean,Number,String],default:void 0},tile:Boolean},"rounded");function x(e){let m=arguments.length>1&&arguments[1]!==void 0?arguments[1]:g();return{roundedClasses:h(()=>{const n=r(e)?e.value:e.rounded,u=r(e)?e.value:e.tile,i=[];if(n===!0||n==="")i.push(`${m}--rounded`);else if(typeof n=="string"||n===0)for(const d of String(n).split(" "))i.push(`rounded-${d}`);else(u||n===!1)&&i.push("rounded-0");return i})}}export{b as a,x as b,f as m,S as u};
